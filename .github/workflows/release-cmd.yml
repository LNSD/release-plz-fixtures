name: release-cmd
on:
  issue_comment:
    types: [ created ]

jobs:
  # Run the `/release-plz set-version <semver>` command only on PRs with branch names matching `^release-plz-*`
  release-set-version:
    runs-on: ubuntu-latest
    if: ${{ github.event.issue.pull_request }}
    steps:
      # Fetch the event details:
      # 1. Check the comment author's repository permissions.
      #    Only users with `admin` and `write` permissions can run the `/release-plz set-version` command.
      #    If the user does not have the required permissions, the workflow mark the workflow as failed
      #    See: https://docs.github.com/en/rest/collaborators/collaborators?apiVersion=2022-11-28#get-repository-permissions-for-a-user
      # 2. Get the PR details from the event details (e.g., PR number, title, description, etc.)
      #    See: https://github.com/actions/checkout/issues/331#issuecomment-707103442
      - name: Fetch event details
        id: event-details
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          github-token: ${{ secrets.RPLZ_GITHUB_PAT }}
          script: |
            // Check the comment author's permissions
            try {
              const comment_author = context.payload.comment.user.login;
              const permissions = await github.rest.repos.getCollaboratorPermissionLevel({
                owner: context.repo.owner,
                repo: context.repo.repo,
                username: comment_author
              });

              if (['admin', 'write'].includes(permissions.data.permission)) {
                core.debug(`Author permissions: ${permissions.data.permission}`);
                core.setOutput('author_permissions', permissions.data.permission);

                core.info(`@${comment_author} has the required permissions to run this command (${permissions.data.permission})`);
              } else {
                core.setFailed(`@${comment_author} does not have the required permissions to run this command (${permissions.data.permission})`);
              }
            } catch (err) {
              core.setFailed(`Failed to get the user's permissions with error: ${err}`);
            }

            // Get the PR details (e.g., PR number, branch namen,  title, description, etc.)
            try {
              const pr_number = context.payload.issue.number;

              core.info(`Getting PR #${pr_number} from ${context.repo.owner}/${context.repo.repo}`);
              const pull_request = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number
              });

              // Set the PR details output for the next steps
              core.debug(`PR details: ${JSON.stringify(pull_request.data)}`);
              core.setOutput('pull_request', pull_request.data);

              // Check if the PR branch name matches the required pattern
              if (/^release-plz-/.test(pull_request.data.head.ref)) {
                  core.info(`PR branch name '${pull_request.data.head.ref}'`);
              } else {
                  core.setFailed(`Branch name '${pull_request.data.head.ref}' does not match the required pattern '^release-plz-*'`);
              }
            } catch (err) {
              core.setFailed(`Failed to get the PR details with error: ${err}`);
            }

      # Check the comment content for the `/release-plz set-version <semver>` command.
      # For the comment content to be considered valid it MUST match the following requirements:
      #  - A comment can contain more text (optional).
      #  - The `/release-plz set-version` command MUST be in a single line.
      # If a valid command invocation is found, set a `+1` emoji reaction to the comment and
      # return the version argument for the next steps to use.
      # Otherwise, the rest of the workflow job must be skipped.
      - name: Validate for release-plz set-version workflow command
        id: cmd-release-plz-set-version
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7
        with:
          github-token: ${{ secrets.RPLZ_GITHUB_PAT }}
          script: |
            const comment_body = context.payload.comment.body;
            const command = comment_body.match(/\/release-plz\s+set-version\s+(.+)$/);

            if (command) {
              core.info(`Found a valid command: ${command[0]}`);
              core.info(`Version: ${command[1]}`);

              // Set the version output for the next steps
              core.setOutput('version', command[1]);

              // Add a +1 reaction to the comment
              core.debug(`Acknowledging comment with ID: ${context.payload.comment.id}`);
              await github.rest.reactions.createForIssueComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: context.payload.comment.id,
                content: '+1'
              })
            } else {
              core.warning('No valid command found in the comment');
            }

      # Run the `/release-plz set-version <version>` command
      - name: Checkout PR branch
        if: ${{ steps.cmd-release-plz-set-version.outputs.version }}
        uses: actions/checkout@eef61447b9ff4aafe5dcd4e0bbf5d482be7e7871 # v4
        with:
          fetch-depth: 0
          ref: ${{ steps.event-details.outputs.pull_request.head.ref }}  # Checkout the PR branch

      - name: Install Rust toolchain
        if: ${{ steps.cmd-release-plz-set-version.outputs.version }}
        uses: actions-rust-lang/setup-rust-toolchain@11df97af8e8102fd60b60a77dfbf58d40cd843b8 # v1

      # release-plz-action
      - name: Install release-plz binary
        if: ${{ steps.cmd-release-plz-set-version.outputs.version }}
        uses: baptiste0928/cargo-install@904927dbe77864e0f2281519fe9d5bd097a220b3 # v3
        with:
          crate: release-plz
          version: 0.3.98

      - name: Configure git user from GitHub tokesemvern
        if: ${{ steps.cmd-release-plz-set-version.outputs.version }}
        uses: MarcoIeni/git-config@59144859caf016f8b817a2ac9b051578729173c4 # v0.1
        env:
          GITHUB_TOKEN: ${{ secrets.RPLZ_GITHUB_PAT }}

      - name: Run release-plz set-version command
        if: ${{ steps.cmd-release-plz-set-version.outputs.version }}
        id: release-plz
        shell: bash
        run: |
          INPUTS_CONFIG_PATH="./.github/release-plz.toml"
          if [[ -n "$INPUTS_CONFIG_PATH" ]]
          then
              echo "using config from \'$INPUTS_CONFIG_PATH\'"

              # Use arrays so that inputs can contain spaces
              CONFIG_PATH=("--config" "$INPUTS_CONFIG_PATH")
          else
              CONFIG_PATH=()
          fi

          INPUTS_MANIFEST_PATH=""
          if [[ -n "$INPUTS_MANIFEST_PATH" ]]
          then
              echo "using manifest path \'$INPUTS_MANIFEST_PATH\'"

              # Use arrays so that inputs can contain spaces
              MANIFEST_PATH=("--manifest-path" "$INPUTS_MANIFEST_PATH")
          else
              MANIFEST_PATH=()
          fi

          echo "-- Running release-plz set-version command --"
          set_version_output=$(release-plz set-version\
              "${CONFIG_PATH[@]}"\
              "${MANIFEST_PATH[@]}"\
              ${{ steps.cmd-release-plz-set-version.outputs.version }})
          echo "set_version_output: $set_version_output"

      # Commit the new version to the repository
      - name: Commit the new version
        if: ${{ steps.cmd-release-plz-set-version.outputs.version }}
        id: commit-version
        run: |
          echo "Committing the new version '${{ steps.cmd-release-plz-set-version.outputs.version }}' to the repository"
          echo "::debug:: Changed files:\n$(git status --porcelain)"
          git add .
          git commit --gpg-sign --message="chore: release"

          echo "Updating the release commit"
          git push origin ${{ steps.event-details.outputs.pull_request.head.ref }} --force

      # TODO: Add step to update the PR title and description with the new version
